import argparse
from pathlib import Path
import h5py
from tqdm import tqdm
from lib import utils

import torch
import torch.nn.functional as F

def main(args):
    for split in ["test_sample"]:#"dev", "test_small":
        split_work_dir = Path(args.work_dir) / split
        with (h5py.File((split_work_dir / f"{utils.CANDIDATES_FILENAME}_{args.generation_mode}").with_suffix(".h5")) as cand_h5,
              h5py.File((split_work_dir / (utils.SIMILARITIES_FILENAME_BASE + "cosine" + f"_{args.generation_mode}")).with_suffix(".h5"), "w") as sim_h5):
            emb_h5ds = cand_h5[utils.CANDIDATES_EMBEDDINGS_H5DS_NAME]
            sim_h5ds = sim_h5.create_dataset(
                utils.SIMILARITIES_H5DS_NAME,
                (emb_h5ds.shape[0],),
                utils.H5_VLEN_FLOAT_DTYPE)
            for idx, emb in enumerate(tqdm(emb_h5ds)):
                emb = F.normalize(torch.tensor(emb))
                sims = torch.matmul(emb, emb.T)
                sim_h5ds[idx] = sims.reshape(-1)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "data_dir", help="Data directory generated by the pipeline from vilem/scripts.")

    parser.add_argument(
        "work_dir", help="Working directory for all steps. "
                         "Will be created if doesn't exist.")

    parser.add_argument(
        "--seed", type=int, default=0, help="Random seed.")
    
    parser.add_argument(
        "--generation_mode", type=str, default="sample", help="Either 'beam' or 'sample'.")
    args = parser.parse_args()
    main(args)

    # python get_similarities  vilem/scripts/data output_emb